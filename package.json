{
    "name": "c-cpp-linter",
    "version": "1.5.2",
    "publisher": "crugthew",
    "repository": {
        "type": "git",
        "url": "http://github.com/crugthew/vscode-c-cpp-linter"
    },
    "homepage": "http://github.com/crugthew/vscode-c-cpp-linter/blob/master/README.md",
    "engines": {
        "vscode": "^1.74.0"
    },
    "license": "SEE LICENSE IN LICENSE.md",
    "displayName": "C/C++ Linter",
    "description": "C/C++ linter using various command-line tools.",
    "categories": [
        "Linters"
    ],
    "keywords": [
        "c",
        "c++",
        "linter",
        "clang",
        "clang-tidy"
    ],
    "main": "./out/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "c-cpp-linter.run",
                "title": "C/C++ Linter: Run"
            },
            {
                "command": "c-cpp-linter.clearFile",
                "title": "C/C++ Linter: Clear Diagnostics For File"
            },
            {
                "command": "c-cpp-linter.clearAll",
                "title": "C/C++ Linter: Clear All Diagnostics"
            }
        ],
        "keybindings": [
            {
                "command": "c-cpp-linter.run",
                "key": "ctrl+l ctrl+f"
            },
            {
                "command": "c-cpp-linter.clearFile",
                "key": "ctrl+l ctrl+c"
            },
            {
                "command": "c-cpp-linter.clearAll",
                "key": "ctrl+l ctrl+shift+c"
            }
        ],
        "configuration": {
            "title": "c-cpp-linter",
            "properties": {
                "c-cpp-linter.compiler.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether running the compiler is enabled."
                },
                "c-cpp-linter.compiler.path": {
                    "type": "string",
                    "default": "/usr/bin/g++",
                    "description": "The compiler binary path. This replaces the compiler used in 'compile_commands.json'."
                },
                "c-cpp-linter.compiler.compilationStateFlag": {
                    "type": "string",
                    "default": "-fsyntax-only",
                    "description": "Can be used to only run the compilation stage and not full assembly. This replaces the '-c' flag."
                },
                "c-cpp-linter.compiler.additionalFlags": {
                    "type": "array",
                    "default": [
                        "-Wall",
                        "-Wextra",
                        "-Wformat",
                        "-Wpedantic",
                        "-Weffc++",
                        "-Wno-unknown-warning-option"
                    ],
                    "description": "Can be used to add additional flags for the compiler."
                },
                "c-cpp-linter.compiler.parsingRegex": {
                    "type": "string",
                    "default": "^(.*?):(\\d+):(\\d*):?\\s+(?:fatal\\s+)?(warning|error):\\s+(.*)$",
                    "description": "The regular expression used to parse the output. Groups are: file, line, column, keywords."
                },
                "c-cpp-linter.compiler.diagnosisKeywords": {
                    "type": "array",
                    "default": [
                        [
                            "error"
                        ],
                        [
                            "warning"
                        ],
                        []
                    ],
                    "description": "Keywords for output that should be grouped by errors, warnings, information."
                },
                "c-cpp-linter.clangTidy.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether running 'clang-tidy' is enabled."
                },
                "c-cpp-linter.clangTidy.path": {
                    "type": "string",
                    "default": "/usr/bin/clang-tidy",
                    "description": "The 'clang-tidy' binary path."
                },
                "c-cpp-linter.clangTidy.checks": {
                    "type": "object",
                    "default": {
                        "disabled": [],
                        "enabled": [
                            "boost-*",
                            "bugprone-*",
                            "concurrency-*",
                            "hicpp-*",
                            "modernize-*",
                            "performance-*",
                            "readability-*"
                        ]
                    },
                    "description": "The checks passed to `clang-tidy`."
                },
                "c-cpp-linter.clangTidy.parsingRegex": {
                    "type": "string",
                    "default": "^(.*?):(\\d+):(\\d*):?\\s+(warning|error):\\s+(.*)$",
                    "description": "The regular expression used to parse the output. Groups are: file, line, column, keywords."
                },
                "c-cpp-linter.clangTidy.diagnosisKeywords": {
                    "type": "array",
                    "default": [
                        [
                            "error"
                        ],
                        [
                            "warning"
                        ],
                        []
                    ],
                    "description": "Keywords for output that should be grouped by errors, warnings, information."
                },
                "c-cpp-linter.cppCheck.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether running 'cppcheck' is enabled."
                },
                "c-cpp-linter.cppCheck.path": {
                    "type": "string",
                    "default": "/usr/bin/cppcheck",
                    "description": "'The 'cppcheck' binary path."
                },
                "c-cpp-linter.cppCheck.additionalFlags": {
                    "type": "array",
                    "default": [
                        "--std=c++17"
                    ],
                    "description": "Can be used to add additional flags for `cppcheck`."
                },
                "c-cpp-linter.cppCheck.checks": {
                    "type": "array",
                    "default": [
                        "warning",
                        "style",
                        "performance",
                        "portability",
                        "information"
                    ],
                    "description": "The checks passed to `cppcheck`."
                },
                "c-cpp-linter.cppCheck.parsingRegex": {
                    "type": "string",
                    "default": "^(.*?):(\\d+):(\\d*):?\\s+(error|warning|style|performance|portability|information):\\s+(.*)$",
                    "description": "The regular expression used to parse the output. Groups are: file, line, column, keywords."
                },
                "c-cpp-linter.cppCheck.diagnosisKeywords": {
                    "type": "array",
                    "default": [
                        [
                            "error"
                        ],
                        [
                            "warning",
                            "style",
                            "performance",
                            "portability"
                        ],
                        [
                            "information"
                        ]
                    ],
                    "description": "Keywords for output that should be grouped by errors, warnings, information."
                },
                "c-cpp-linter.general.buildFolderPath": {
                    "type": "string",
                    "default": "${workspaceFolder}/build",
                    "description": "Path to the folder where 'compile_commands.json' exists."
                },
                "c-cpp-linter.general.showInformationDialog": {
                    "type": "boolean",
                    "default": false,
                    "description": "Show the information dialog."
                },
                "c-cpp-linter.general.showOutputFromLinters": {
                    "type": "boolean",
                    "default": false,
                    "description": "Show output from linters."
                },
                "c-cpp-linter.general.maximumParallelTasks": {
                    "type": "number",
                    "default": 4,
                    "description": "Maximum number of tasks to run in parallel. Others will be added onto a queue."
                },
                "c-cpp-linter.general.sourceFileExtensions": {
                    "type": "array",
                    "default": [
                        "c",
                        "cpp"
                    ],
                    "description": "Source file extensions."
                },
                "c-cpp-linter.general.ignoredPaths": {
                    "type": "array",
                    "default": [],
                    "description": "List of regular expressions for paths which should be ignored when generating diagnostics."
                },
                "c-cpp-linter.general.runOnOpen": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to run on open."
                },
                "c-cpp-linter.general.runOnSave": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to run on save."
                }
            }
        }
    },
    "activationEvents": [
        "onLanguage:cpp",
        "onLanguage:c",
        "onCommand:c-cpp-linter.run"
    ],
    "dependencies": {
        "async-mutex": "^0.4.0"
    },
    "devDependencies": {
        "@types/glob": "^8.0.0",
        "@types/mocha": "^10.0.1",
        "@types/node": "16.x",
        "@types/vscode": "^1.74.0",
        "@typescript-eslint/eslint-plugin": "^5.45.0",
        "@typescript-eslint/parser": "^5.45.0",
        "@vscode/test-electron": "^2.2.0",
        "eslint": "^8.28.0",
        "glob": "^8.0.3",
        "mocha": "^10.1.0",
        "typescript": "^4.9.3"
    },
    "extensionKind": [
        "workspace"
    ],
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "lint": "eslint src --ext ts"
    }
}
